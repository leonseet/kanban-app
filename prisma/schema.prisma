datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  newUser       Boolean   @default(true)
  password      String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model UserCredential {
//   id        Int     @id @default(autoincrement())
//   lastName  String
//   firstName String
//   email     String  @unique
//   password  String
//   boards    Board[]
// }

model Board {
  id        Int      @id @default(autoincrement())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rank      String
  createdAt DateTime @default(now())
  columns   Column[]

  @@unique([title, userId], name: "uniqueTitlePerUser")
  @@index([userId], name: "userId")
}

model Column {
  id        Int      @id @default(autoincrement())
  title     String?
  boardId   Int
  board     Board?   @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now())
  tasks     Task[]
  rank      String

  @@index([boardId], name: "boardId")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  status      String?
  columnId    Int
  rank        String
  column      Column    @relation(fields: [columnId], references: [id])
  createdAt   DateTime  @default(now())
  subtasks    Subtask[]

  @@index([columnId], name: "columnId")
}

model Subtask {
  id          Int      @id @default(autoincrement())
  description String?
  checked     Boolean  @default(false)
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  createdAt   DateTime @default(now())
  rank        String

  @@index([taskId], name: "taskId")
}
